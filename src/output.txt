   Compiling vistream v0.1.0 (/home/bisonbots/dev/vistream)
warning: unused import: `std::time::Duration`
 --> src/camera.rs:1:5
  |
1 | use std::time::Duration;
  |     ^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `FrameBuffer`, `camera_manager`, `framebuffer::AsFrameBuffer`, and `properties`
  --> src/camera.rs:5:5
   |
5  |     camera_manager,
   |     ^^^^^^^^^^^^^^
6  |     framebuffer::AsFrameBuffer,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
7  |     framebuffer_allocator::{FrameBuffer, FrameBufferAllocator},
   |                             ^^^^^^^^^^^
...
10 |     properties,
   |     ^^^^^^^^^^

error[E0609]: no field `size` on type `Immutable<StreamConfigurationRef<'_>>`
  --> src/camera.rs:76:30
   |
76 |             frame_size: (cfg.size.width as usize, cfg.size.height as usize),
   |                              ^^^^ unknown field

error[E0609]: no field `size` on type `Immutable<StreamConfigurationRef<'_>>`
  --> src/camera.rs:76:55
   |
76 |             frame_size: (cfg.size.width as usize, cfg.size.height as usize),
   |                                                       ^^^^ unknown field

error[E0308]: mismatched types
  --> src/camera.rs:95:27
   |
95 |         cfg.set_size(Size{width, height});
   |                           ^^^^^ expected `u32`, found `usize`
   |
help: you can convert a `usize` to a `u32` and panic if the converted value doesn't fit
   |
95 |         cfg.set_size(Size{width: width.try_into().unwrap(), height});
   |                           ++++++      ++++++++++++++++++++

error[E0308]: mismatched types
  --> src/camera.rs:95:34
   |
95 |         cfg.set_size(Size{width, height});
   |                                  ^^^^^^ expected `u32`, found `usize`
   |
help: you can convert a `usize` to a `u32` and panic if the converted value doesn't fit
   |
95 |         cfg.set_size(Size{width, height: height.try_into().unwrap()});
   |                                  +++++++       ++++++++++++++++++++

warning: variable does not need to be mutable
  --> src/camera.rs:82:13
   |
82 |         let mut ccam = cam.acquire().ok()?;
   |             ----^^^^
   |             |
   |             help: remove this `mut`
   |
   = note: `#[warn(unused_mut)]` on by default

error[E0515]: cannot return value referencing function parameter `cam`
  --> src/camera.rs:86:9
   |
82 |         let mut ccam = cam.acquire().ok()?;
   |                        --- `cam` is borrowed here
...
86 |         Camera::from_config(cam, ccam, cfgs)
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ returns a value referencing data owned by the current function

error[E0505]: cannot move out of `cam` because it is borrowed
  --> src/camera.rs:86:29
   |
37 | impl<'a> Camera<'a> {
   |      -- lifetime `'a` defined here
...
81 |     pub fn new(cam: camera::Camera<'a>) -> Option<Camera<'a>> {
   |                --- binding `cam` declared here
82 |         let mut ccam = cam.acquire().ok()?;
   |                        --- borrow of `cam` occurs here
...
86 |         Camera::from_config(cam, ccam, cfgs)
   |         --------------------^^^-------------
   |         |                   |
   |         |                   move out of `cam` occurs here
   |         returning this value requires that `cam` is borrowed for `'a`

Some errors have detailed explanations: E0308, E0505, E0515, E0609.
For more information about an error, try `rustc --explain E0308`.
warning: `vistream` (bin "vistream") generated 3 warnings
error: could not compile `vistream` (bin "vistream") due to 6 previous errors; 3 warnings emitted
